#! /bin/bash

##=======================================================================================
# Starts the self-contained web-application
##=======================================================================================

set -o pipefail
IFS=$'\n\t '

# ======= CONSTANTS =====================================================================
readonly PERMITTED_USER=("uni_qgo")
readonly CURRENT_DIR="$(pwd -P)"
readonly PROFILE="$1"
readonly VM_NAME="$2"

source "../common/common"

# ======= read the variables used by the control scripts ================================
source "environment.variables" || {
    echo "Please create a file called, environment.variables, containing the necessary environment variables."
    exit 1
}

# ========================= utility functions ===========================================
function show_help {
    cat<<EOF
  Usage: [profile] [vm_name]

  Argument description:
    profile      => Indicates the profile of the services to check the status, possible values [dev|test|prod]
    vm_name      => The name of the virtual machine top check the status

  Example: dev -- checks status of all development REST services
           dev ves-hx-c2 -- check status of the REST service on ves-hx-c2

  WARNING: Please be aware of who is using the machine before starting/stopping them.
EOF
}

# ====== check that the script has the right number of argument ========================
if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
   show_help
   exit 1
fi

# ======= check the right user runs this script =======================================
if ! user_can_execute_script $USER PERMITTED_USER; then
    echo "This service can only be run as user(s), '${PERMITTED_USER[@]}'"
    exit 1
fi

# ===== check that vm argument belongs to provided profile =============================
if [ ! -z "$VM_NAME" ] && vm_belongs_to_profile $VM_NAME $PROFILE; then
   echo "Input VM: $VM_NAME, does not belong to profile $PROFILE."
   exit 1  
fi

# ====== check which environment will be stopped =====================================
if ! check_profile $PROFILE; then
   echo "Input profile: $PROFILE, not recognized. Allowable values: $(print_valid_profiles VALID_PROFILES)"
   exit 1
fi

#grab the virtual machines to shutdown
readonly VMS=$(get_hosts $PROFILE)

if [ -z "$VMS" ]; then
   echo "No virtual machines configured for profile: $PROFILE"
   exit 1
fi

# ====== check status of all vms associated to the profile ===========================
for vm in $VMS; do
  if [ -z "$VM_NAME" ] || [ "$VM_NAME" = $vm ]; then
    vm_status="$(ssh "$USER"@"$vm" "CURRENT_DIR=$CURRENT_DIR bash ${CURRENT_DIR}/../status-check-on-vm")"
    
  if [[ "$vm_status" == *"UP"* ]]; then
       echo "$vm is UP"
    else
       echo "$vm is DOWN"
    fi
  fi
done

#! /bin/bash

##=========================================================================================
# Fetches latest library and stores it in lib
# Also, backs-up the currently used libraries in lib/backups
##=========================================================================================

set -euo pipefail
IFS=$'\n\t '

source "../common/common"

# ======= read the variables used by the control scripts ================================
source "environment.variables" || {
    echo "Please create a file called, environment.variables, containing the necessary environment variables."
    exit 1
}

# ====== check which environment will be started ========================================
if ! check_profile $1; then
   echo "Input profile: $1, not recognized. Allowable values: $(print_valid_profiles VALID_PROFILES)"
   exit 1
fi

readonly PROFILE="$1"

# ======= CONSTANTS =======================================
readonly PERMITTED_USER=("uni_qgo")
readonly RELEASE_REPO_TYPE="release"
readonly RELEASE_REPO_NAME="uniprot-artifactory-release"
readonly SNAPSHOT_REPO_TYPE="snapshot"
readonly SNAPSHOT_REPO_NAME="uniprot-artifactory-snapshots"
readonly JAVA="$JAVA_HOME/bin/java"
readonly MAVEN="$MAVEN_HOME/bin/mvn"
readonly SERVICE_CONF_PATH="$(pwd -P)"
readonly SERVICE_NAME="$(basename $SERVICE_CONF_PATH)"
readonly SERVICE_LIVE_NAME="live"
readonly SERVICE_BASE="$(readlink -f $SERVICE_CONF_PATH/../../$SERVICE_LIVE_NAME)"
readonly SERVICE_PATH="$SERVICE_BASE/$SERVICE_NAME/$PROFILE"
readonly LIB_DIR="$SERVICE_PATH/lib"
readonly BACKUP_LIB_DIR="$SERVICE_PATH/lib/backups"
readonly QUICKGO_REPO_DIR="$SERVICE_CONF_PATH/../../repos/QuickGOBE"
readonly BRANCH="master"

# ======= check the right user runs this script =======================================
if ! user_can_execute_script $USER PERMITTED_USER; then
    echo "This service can only be run as user(s), '${PERMITTED_USER[@]}'"
    exit 1
fi

# ======= check if script is run on the right VM =====================================
if ! [[ $(hostname) =~ ^ebi.* ]]; then
    echo "This script can only be run from an EBI cluster machine"
    exit 1
fi

# ======= FUNCTIONS ======================================================================
function show_help {
    cat<<EOF
  Usage: [profile]

  Argument description:
    profile      => Indicates the profile of the services to update, possible values [dev|test|prod]

  Example: dev -- updates libraries for the development REST services

  WARNING: Please be aware of who is using the machine before starting/stopping them.
EOF
}

# ======= take a string and add a time-stamp to it =======================================
function addTimeStamp() {
    local dirname="$(dirname $1)"
    local fname=$(basename "$1")
    local fext=""

    if echo "$fname" | grep '\.'; then
        fext=".${fname##*.}"
    fi

    local fname="${fname%.*}"
    echo "$dirname/$fname-$(date '+%s.%N')$fext"
}

readonly TIMESTAMPED_BACKUP_DIR="$(addTimeStamp $BACKUP_LIB_DIR/version)"

# ======= read the variables used by the control scripts =======================================
source "environment.variables" || {
    echo "Please create a file called, environment.variables, containing the necessary environment variables."
    exit 1
}

[ ! -z "$ARTIFACT_GROUP" ] || [ ! -z "$ARTIFACT_VERSION" ] || [[ ! -z "$ARTIFACT_ID" ]] || {
    echo "Please specify the environment variables ARTIFACT_GROUP, ARTIFACT_VERSION and ARTIFACT_ID, in file, \
environment.variables."
    exit 1
}

# ====== create library directories =====================
if [ ! -d "$LIB_DIR" ]; then
    mkdir -p $LIB_DIR
fi
if [ ! -d "$BACKUP_LIB_DIR" ]; then
    mkdir -p $BACKUP_LIB_DIR
fi

# ======= install the REST artifacts before fetching them =======================================
cd $QUICKGO_REPO_DIR
git fetch
git checkout $BRANCH
git pull

mvn -P all -DskipTests install
cd $SERVICE_CONF_PATH

# ======= build the variables required for artifact retrieval =======================================
JAR_NAME="$ARTIFACT_ID-$ARTIFACT_VERSION.jar"
GROUP_AS_URL="$(echo $ARTIFACT_GROUP | sed -e 's/\./\//g')"

REPO_TYPE="$RELEASE_REPO_TYPE"
REPO_NAME="$RELEASE_REPO_NAME"

if echo "$JAR_NAME" | grep 'SNAPSHOT' > /dev/null; then
    REPO_TYPE="$SNAPSHOT_REPO_TYPE"
    REPO_NAME="$SNAPSHOT_REPO_NAME"
fi
REPO_URL="http://wwwdev.ebi.ac.uk/uniprot/artifactory/$REPO_TYPE"

# ======= get the artifact from maven =======================================
GAV="$ARTIFACT_GROUP:$ARTIFACT_ID:$ARTIFACT_VERSION"
echo "Fetching artifact: $GAV"
TEMP_DIR="$(addTimeStamp 'temp')"

# first get the pom, so that later we can get the jar
mvn -U org.apache.maven.plugins:maven-dependency-plugin:2.7:get \
        -DrepoUrl="$REPO_URL" \
        -DrepoId="$REPO_NAME" \
        -Dartifact="$GAV" \
        -Dtype=pom

# ... and get the jar
mvn -U org.apache.maven.plugins:maven-dependency-plugin:2.7:copy \
        -DrepoUrl="$REPO_URL" \
        -DrepoId="$REPO_NAME" \
        -Dartifact="$GAV" \
        -Dtype=jar \
        -DoutputDirectory="$TEMP_DIR"


# ======= keep only last 5 backups =======================================
pushd . > /dev/null
cd "$BACKUP_LIB_DIR"

# double check we're actually in the backup directory, before deleting anything!
if [ "$(basename $(pwd))" = "$(basename $BACKUP_LIB_DIR)" ]; then
    echo "Deleting oldest backups, but keeping newest 5";
    (ls -t|head -n 5;ls)|sort|uniq -u|xargs rm -rf;
fi
popd > /dev/null

# ======= backup old lib =======================================
if ls $LIB_DIR/*.jar > /dev/null 2>&1; then
    if [ ! -d "$TIMESTAMPED_BACKUP_DIR" ]; then
        mkdir $TIMESTAMPED_BACKUP_DIR
    fi
    for lib in "$(ls $LIB_DIR/*.jar)"; do
        ls "$lib" > /dev/null 2>&1 && mv "$lib" "$TIMESTAMPED_BACKUP_DIR"
    done
fi

# ======= move new artifact into lib =======================================
for new_lib in "$(ls $TEMP_DIR/*.jar)"; do
    ls "$new_lib" > /dev/null 2>&1 && mv "$new_lib" "$LIB_DIR"
done

rmdir $TEMP_DIR || {
    echo "Could not clean up temp directory: '$TEMP_DIR'. Please check it is empty."
}

# ======= add a readme describing the contents of the app directory =======================================
if [ -d "$SERVICE_BASE" ]; then
    mkdir -p $SERVICE_BASE
    echo "Contains live details (libraries, logs and PID files) for applications that " \
          "correspond to their configuration details in ../bin." > "$SERVICE_BASE/readme.txt"
fi

echo "done"

#! /bin/bash

##=========================================================================================
# Stops the self-contained web-application
##=========================================================================================

set -eo pipefail

# ======= load working directory ==============================
if [ -z "$CURRENT_DIR" ]; then
    SERVICE_CONF_PATH="$(pwd -P)"
else
    SERVICE_CONF_PATH="$CURRENT_DIR"
fi

# ======= read the variables used by the control scripts =======================================
source "${SERVICE_CONF_PATH}/environment.variables" || {
    echo "Please create a file called, environment.variables, containing the necessary environment variables."
    exit 1
}

source "$(dirname $(which $0))/common/common"

readonly PROFILE=$(get_profile_from_vm "$(hostname)")
# ======= CONSTANTS =======================================
readonly PERMITTED_USER=("uni_qgo")
readonly SERVICE_NAME="$(basename $SERVICE_CONF_PATH)"
readonly SERVICE_LIVE_NAME="live"
readonly SERVICE_BASE="$(readlink -f $SERVICE_CONF_PATH/../../$SERVICE_LIVE_NAME)"
readonly SERVICE_PATH="$SERVICE_BASE/$SERVICE_NAME/$PROFILE"
readonly RUN_DIR="$SERVICE_PATH/out"
readonly PIDFILE="$RUN_DIR/up@$(hostname).pid"

# ======= check the right user runs this script =======================================
if ! user_can_execute_script $USER PERMITTED_USER; then
    echo "This service can only be run as user(s), '${PERMITTED_USER[@]}'"
    exit 1
fi

# ======= check if script is run on the right VM =====================================
if [[ $(hostname) =~ ^ebi.* ]]; then
    echo "This script can only be run on NON EBI cluster machines";
    exit 1;
fi

# ====== check if profile exists =====================================================
if [ -z "$PROFILE" ]; then 
   echo "Current VM: $(hostname) does not belong to any profile"
   exit 1
fi

# ======= no PID file existence indicates the service is not running =======================================
if [ ! -f $PIDFILE ]
then
    echo "Warning: PID file does not exist ($PIDFILE). Please check this service should be running on this machine ($(hostname))."
    exit 1
fi

# ======= read PIDFILE to check the PID =======================================
readonly PIDSTR=$(cat $PIDFILE)

if ps "$PIDSTR" > /dev/null; then
    # ======= stop the application =======================================
    echo "Stopping the job with PID: $PIDSTR."

    kill -9 $PIDSTR > /dev/null 2>&1 || {
        echo "Could not kill process. Please check the PID manually: $PIDSTR"
        exit 1
    }
else
   echo "No PID $PIDSTR on host, $(hostname) found. Nothing to stop."
fi

# ======= remove the now invalid PID file =======================================
echo "Removing the now old PID file $PIDFILE"
rm $PIDFILE

echo "The service $PIDSTR is no longer running."

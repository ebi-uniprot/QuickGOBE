#! /bin/bash

##=======================================================================================
# Starts the self-contained web-application
##=======================================================================================

set -eo pipefail
IFS=$'\n\t '

readonly PERMITTED_USER=("uni_qgo")
readonly CURRENT_DIR="$(pwd -P)"
readonly PROFILE="$1"
readonly VM_NAME="$2"

source "../common/common"

# ======= read the variables used by the control scripts ================================
source "environment.variables" || {
    echo "Please create a file called, environment.variables, containing the necessary environment variables."
    exit 1
}

# ========================= utility functions ===========================================
function show_help {
    cat<<EOF
  Usage: [profile] [vm_name]

  Argument description:
    profile      => Indicates the profile of the services to startup, possible values [dev|test|prod]
    vm_name      => The name of the virtual machine top startup

  Example: dev -- starts up all development REST services
           dev ves-hx-c2 -- starts the development REST service on ves-hx-c2

  WARNING: Please be aware of who is using the machine before starting/stopping them.
EOF
}

# ====== check that the script has the right number of argument ========================
if [ "$#" -lt 1 ] || [ "$#" -gt 2 ]; then
   show_help
   exit 1
fi

# ====== check which environment will be started ========================================
if ! check_profile $PROFILE; then
   echo "Input profile: $PROFILE, not recognized. Allowable values: $(print_valid_profiles VALID_PROFILES)"
   exit 1
fi

# ===== check that vm argument belongs to provided profile =============================
if [ ! -z "$VM_NAME" ] && vm_belongs_to_profile $VM_NAME $PROFILE; then
   echo "Input VM: $VM_NAME, does not belong to profile: $PROFILE."
   exit 1  
fi

# ======= check the right user runs this script =========================================
if ! user_can_execute_script $USER PERMITTED_USER; then
    echo "This service can only be run as user(s), '${PERMITTED_USER[@]}'"
    exit 1
fi

# ======= grab the virtual machines to startup ==========================================
readonly VMS=$(get_hosts $PROFILE)

if [ -z "$VMS" ]; then
   echo "No VMs found for profile: $PROFILE"
   exit 1
fi

function cleanup_on_error() {
   cat << EOF
      #================================ ERROR ======================================#
       $VM_NAME has failed to startup. Shutting down all servers for profile: $PROFILE
      #=============================================================================#
EOF

   ../stop "$PROFILE"
}

# ====== confirm that all vms for given profile are down ================================
function check_all_vms_down() {
   local up=0

   for vm in $VMS; do
     ssh "$USER"@"$vm" "CURRENT_DIR=$CURRENT_DIR bash $CURRENT_DIR/../status-check-on-vm" 1>/dev/null

     # if server is up, then log it
     if [ $? -eq "0" ]; then
         servers_up+="   $vm"
         up=1
     fi
   done

   return $up
}

if ! check_all_vms_down; then
    cat<< EOF
  #================================ ERROR ======================================#
   The following servers are up, and need to be shutdown:                      
   ${servers_up}                                                              
  #=============================================================================#
EOF

  exit 1
fi

#start-up all vms for given profile
for vm in $VMS; do
  if [ -z "$VM_NAME" ] || [ "$VM_NAME" = $vm ]; then
    trap 'cleanup_on_error $vm' INT TERM ERR
    ssh "$USER"@"$vm" "CURRENT_DIR=$CURRENT_DIR bash $CURRENT_DIR/../start-on-vm"
  fi
done
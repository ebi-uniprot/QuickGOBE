#! /bin/bash

##=========================================================================================
# Used to startup a REST service when logged onto the VM hosting the service.
#
# WARNING: Do not use this script on the EBI login nodes
##=========================================================================================

set -eo pipefail
IFS=$'\n\t '

# ======= load working directory ==============================
if [ -z "$CURRENT_DIR" ]; then
    SERVICE_CONF_PATH="$(pwd -P)"
else
    SERVICE_CONF_PATH="$CURRENT_DIR"
fi

# ======= read the variables used by the control scripts =======================================
source "${SERVICE_CONF_PATH}/environment.variables" || {
    echo "Please create a file called, environment.variables, containing the necessary environment variables."
    exit 1
}

source "$(dirname $(which $0))/common/common"

# ======= CONSTANTS =======================================
readonly PERMITTED_USER=("uni_qgo")
readonly SERVICE_LIVE_NAME="live"
readonly PROFILE=$(get_profile_from_vm "$(hostname)")
readonly SERVICE_NAME="$(basename $SERVICE_CONF_PATH)"
readonly SERVICE_BASE="$(readlink -f $SERVICE_CONF_PATH/../../$SERVICE_LIVE_NAME)"
readonly SERVICE_PATH="$SERVICE_BASE/$SERVICE_NAME/$PROFILE"
readonly RUN_DIR="$SERVICE_PATH/out"
readonly PIDFILE="$RUN_DIR/up@$(hostname).pid"
readonly SERVICE_JAR="$ARTIFACT_ID-$ARTIFACT_VERSION.jar"
readonly LIB_DIR="$SERVICE_PATH/lib"
readonly SERVER_ADDR_BINDING="-Dserver.address=0.0.0.0"
readonly SERVER_PORT="-Dserver.port=$PORT"
readonly SPRING_CONFIG_LOCATION="--spring.config.location=$SERVICE_CONF_PATH/"
readonly SPRING_LOADER_PATH="-Dloader.path=lib/,config/,$SERVICE_CONF_PATH/"
readonly SPRING_TOMCAT_ACCESS_LOGS="-Dserver.tomcat.access-log-enabled=true"
readonly SPRING_TOMCAT_BASEDIR="-Dserver.tomcat.basedir=$(hostname)"
readonly SPRING_LOGGING_CONFIG="-Dlogging.config=$SERVICE_CONF_PATH/logback.xml"
readonly SPRING_LOGGING_DEST="-Dlogging.path=$(hostname)/logs/"

readonly JAVA=$JAVA_HOME/bin/java

# ======= load profile from the current VM ===================================
if [ -z "$PROFILE" ]; then 
   echo "Current VM: $(hostname) does not belong to any profile"
   exit 1
fi

echo "Loaded profile: $PROFILE"

# ======= check the right user runs this script =======================================
if ! user_can_execute_script $USER PERMITTED_USER; then
    echo "This service can only be run as user(s), '${PERMITTED_USER[@]}'"
    exit 1
fi

# ======= check if script is run on the right VM =====================================
if [[ $(hostname) =~ ^ebi.* ]]; then
    echo "This script can only be run on NON EBI cluster machines";
    exit 1;
fi

# ======= if a PID file exists, it looks as though the service has already been started =======================================
if [ -e $PIDFILE ]; then
    # ======= read PIDFILE to check the PID =======================================
    readonly PIDSTR=$(cat $PIDFILE)

    if ps "$PIDSTR" > /dev/null; then
        # ======= PID exists so do not proceed =======================================
        echo "Service is already running (see PID $PIDSTR). Please stop it before trying to start it."
        exit 1
    else
        # ======= PID does not exist so remove invalid PID file =======================================
        echo "No PID $PIDSTR on host, $(hostname) found. Removing invalid PID file, $PIDFILE."
        rm $PIDFILE
    fi
fi

[ ! -z "$ARTIFACT_VERSION" ] || [ ! -z "$ARTIFACT_ID" ] || {
    echo "Please specify the environment variables ARTIFACT_VERSION and ARTIFACT_ID."
    exit 1
}

# ======= build java variables =======================================
if [ -z "$JAVA_HOME" ]; then
    echo "JAVA_HOME environment variable must be set. Aborting."
    exit 1;
fi

JAVA_OPTS="-Dcom.sun.management.jmxremote  \
            -Dcom.sun.management.jmxremote.authenticate=false \
            -Dcom.sun.management.jmxremote.ssl=false  \
            -Dcom.sun.management.jmxremote.port=$JXM_REMOTE_PORT \
            -Dspring.profiles.active=$PROFILE"

if [ "$JVM_FLIGHT_RECORDER" == "on" ]; then
    echo "JVM flight recorder options in use"
    JAVA_OPTS="$JAVA_OPTS \
            -XX:+UnlockCommercialFeatures \
            -XX:+FlightRecorder \
            -XX:FlightRecorderOptions=loglevel=debug"
else
    echo "JVM flight recorder options not in use"
fi

# ======= build the command to start the service =======================================
RUN_COMMAND="$JAVA $JVM_MEM_MIN $JVM_MEM_MAX $JAVA_OPTS $SERVER_PORT $SPRING_LOADER_PATH
$SERVER_ADDR_BINDING $SPRING_TOMCAT_BASEDIR $SPRING_TOMCAT_ACCESS_LOGS
$SPRING_LOGGING_CONFIG $SPRING_LOGGING_DEST -jar $LIB_DIR/$SERVICE_JAR $SPRING_CONFIG_LOCATION"

# ======= save current directory =======================================
pushd . > /dev/null

# ======= check the service jar exists before proceeding ... =======================================
cd $LIB_DIR
ls -1 $SERVICE_JAR > /dev/null 2>&1

if [ ! $? ]; then
    echo "Error: $LIB_DIR/$SERVICE_JAR does not exist. Aborting."
    exit 1
fi

if [ ! -e "$RUN_DIR" ]; then
    mkdir -p $RUN_DIR
    echo "Created base directory '$RUN_DIR' for recording activities of the live application, e.g., logs"
fi

# ======= start the application and record the PID =======================================
cd $RUN_DIR
echo "Running command: $RUN_COMMAND"

# run the application headless
nohup $RUN_COMMAND > /dev/null 2>&1 &
PID="$!"

echo "Sleeping 2 seconds, before acquiring PID"
sleep 2

ps $PID > /dev/null || {
    echo "The process could not be started. Please check."
    exit 1
}

# ======= jump back to saved directory =======================================
popd > /dev/null

echo "PID retrieved successfully"
echo "$PID" > $PIDFILE

echo "Service has now been started with PID, $PID, on host, $(hostname), at port $PORT"
